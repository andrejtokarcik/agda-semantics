<k>
    .K
</k>
<mgu>
    subst(.KList)
</mgu>
<ctx-stack>
    .List
</ctx-stack>
<sig>
    Name ( "elim-False" ) |-> { #symVariable(381) : Set ( 0 ) } -> ( 
      #symVariable(380) : Data ( "False" ) ) -> #symVariable(381)
    Fun ( "_+_" ) |-> ( #symVariable(31) : Data ( "Nat" ) ) -> ( #symVariable(
      32) : Data ( "Nat" ) ) -> Data ( "Nat" )
    Fun ( "if_then_else_" ) |-> { #symVariable(77) : Set ( 0 ) } -> ( 
      #symVariable(74) : Data ( "Bool" ) ) -> ( #symVariable(75) : 
      #symVariable(77) ) -> ( #symVariable(76) : #symVariable(77) ) -> 
      #symVariable(77)
    Fun ( "map" ) |-> { #symVariable(187) : Set ( 0 ) } -> { #symVariable(186)
       : Set ( 0 ) } -> ( #symVariable(183) : ( #symVariable(185) : 
      #symVariable(187) ) -> #symVariable(186) ) -> ( #symVariable(184) : (
      Data ( "List" ) #symVariable(187)) ) -> (Data ( "List" ) #symVariable(
      186))
    Fun ( "nil" ) |-> ( #symVariable(157) : Set ( 0 ) ) -> (Data ( "List" ) 
      #symVariable(157))
    Fun ( "pred" ) |-> ( #symVariable(13) : Data ( "Nat" ) ) -> Data ( "Nat" )
    Data ( "Bool" ) |-> Set ( 0 )
    Data ( "False" ) |-> Set ( 0 )
    Data ( "List" ) |-> ( #symVariable(136) : Set ( 0 ) ) -> Set ( 0 )
    Data ( "Nat" ) |-> Set ( 0 )
    Con ( "[]" ) |-> { #symVariable(141) : Set ( 0 ) } -> (Data ( "List" ) 
      #symVariable(141))
    Con ( "_::_" ) |-> { #symVariable(152) : Set ( 0 ) } -> ( #symVariable(150
      ) : #symVariable(152) ) -> ( #symVariable(151) : (Data ( "List" ) 
      #symVariable(152)) ) -> (Data ( "List" ) #symVariable(152))
    Con ( "false" ) |-> Data ( "Bool" )
    Con ( "suc" ) |-> ( #symVariable(12) : Data ( "Nat" ) ) -> Data ( "Nat" )
    Con ( "true" ) |-> Data ( "Bool" )
    Con ( "zero" ) |-> Data ( "Nat" )
</sig>
<ctx>
    .Map
</ctx>
<meta>
    .Map
</meta>
<ncat>
    Name ( "Bool" ) |-> Data ( "Bool" )
    Name ( "False" ) |-> Data ( "False" )
    Name ( "List" ) |-> Data ( "List" )
    Name ( "Nat" ) |-> Data ( "Nat" )
    Name ( "[]" ) |-> Con ( "[]" )
    Name ( "_+_" ) |-> Fun ( "_+_" )
    Name ( "_::_" ) |-> Con ( "_::_" )
    Name ( "false" ) |-> Con ( "false" )
    Name ( "if_then_else_" ) |-> Fun ( "if_then_else_" )
    Name ( "map" ) |-> Fun ( "map" )
    Name ( "nil" ) |-> Fun ( "nil" )
    Name ( "pred" ) |-> Fun ( "pred" )
    Name ( "suc" ) |-> Con ( "suc" )
    Name ( "true" ) |-> Con ( "true" )
    Name ( "zero" ) |-> Con ( "zero" )
</ncat>
<fun>
    Fun ( "_+_" ) |-> 'fc(((#symFunClauses(44) Con ( "zero" )) Var ( "m" )) = 
      Var ( "m" ),, ((#symFunClauses(73) (Con ( "suc" ) Var ( "n" ))) Var ( 
      "m" )) = (Con ( "suc" ) ((Fun ( "_+_" ) Var ( "n" )) Var ( "m" ))))
    Fun ( "if_then_else_" ) |-> 'fc(((((#symFunClauses(106) { #symVariable(102
      ) }) Con ( "true" )) Var ( "x" )) Var ( "y" )) = Var ( "x" ),, ((((
      #symFunClauses(135) { #symVariable(131) }) Con ( "false" )) Var ( "x" ))
       Var ( "y" )) = Var ( "y" ))
    Fun ( "map" ) |-> 'fc(((((#symFunClauses(257) { DotP ( #symExpr(237) ) }) 
      { #symVariable(253) }) Var ( "f" )) (Con ( "[]" ) { #symExpr(237) })) = 
      (Con ( "[]" ) { #symVariable(253) }),, ((((#symFunClauses(379) { DotP ( 
      #symExpr(259) ) }) { #symVariable(375) }) Var ( "f" )) (((Con ( "_::_" )
       { #symExpr(259) }) Var ( "x" )) Var ( "xs" ))) = (((Con ( "_::_" ) { 
      #symVariable(375) }) (Var ( "f" ) Var ( "x" ))) ((((Fun ( "map" ) { 
      #symExpr(259) }) { #symVariable(375) }) Var ( "f" )) Var ( "xs" ))))
    Fun ( "nil" ) |-> \ ( Var ( "A" ) : #symExpr(168) ) -> (Con ( "[]" ) { Var
       ( "A" ) })
    Fun ( "pred" ) |-> 'fc((#symFunClauses(19) Con ( "zero" )) = Con ( "zero" 
      ),, (#symFunClauses(30) (Con ( "suc" ) Var ( "n" ))) = Var ( "n" ))
</fun>
