<T>
    <k>
        .K
    </k>
    <mgu>
        subst(.KList)
    </mgu>
    <tenv>
        expr |->  List #symVariable(13) 
    </tenv>
    <data>
        Cons |-> 'Pi___(a,, Set 0,, (Pi x a (Pi y List a List a)))
        List |-> 'Pi___(a,, Set 0,, Set 0)
        Nat |-> Set 0
        Nil |-> 'Pi___(a,, Set 0,,  List a )
        Succ |-> 'Pi___(x,, Nat,, Nat)
        Zero |-> Nat
    </data>
    <fun>
        expr |->  Cons neut ( #symExpr(11) , .Map )  Succ Zero   Nil neut 
          ( #symExpr(22) , .Map )  
    </fun>
    <meta>
        #symExpr(11) |-> ( Nat , Set 0 )
        #symExpr(22) |-> ( #symExpr(22) , Set 0 )
    </meta>
</T>
