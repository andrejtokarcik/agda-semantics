<dbg>
    .List
</dbg>
<T>
    <k>
        ( eqNat Zero Zero , #symExpr(7) ) = ( True , Bool ) ~> funDecl ( 
          eqNat , .Map ) ~> eqNat Zero (Succ y) = False ~> eqNat (Succ x) Zero
           = False ~> eqNat (Succ x) (Succ y) =  eqNat x y 
    </k>
    <mgu>
        subst(.KList)
    </mgu>
    <data>
        Bool |-> Set 0
        False |-> Bool
        Nat |-> Set 0
        Succ |-> (Pi x Nat Nat)
        True |-> Bool
        Zero |-> Nat
    </data>
    <meta>
        .Map
    </meta>
    <fun>
        .Map
    </fun>
    <tenv>
        eqNat |-> (Pi #symVariable(2) Nat (Pi #symVariable(5) Nat #symExpr
          (7)))
    </tenv>
</T>
