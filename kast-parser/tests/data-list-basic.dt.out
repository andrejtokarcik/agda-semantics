<T>
    <k>
        .K
    </k>
    <mgu>
        subst(.KList)
    </mgu>
    <tenv>
        expr |->  List Nat 
    </tenv>
    <data>
        Cons |-> 'Pi___(a,, Set 0,, (Pi x a (Pi y List a List a)))
        List |-> 'Pi___(a,, Set 0,, Set 0)
        Nat |-> Set 0
        Nil |-> 'Pi___(a,, Set 0,,  List a )
        Succ |-> 'Pi___(x,, Nat,, Nat)
        Zero |-> Nat
    </data>
    <fun>
        expr |-> lambda ( closure ( x ,  Cons Nat Zero x  , .Map ) )   
          Cons Nat Zero    Cons Nat  Succ Zero    Nil Nat   
    </fun>
    <meta>
        .Map
    </meta>
</T>
