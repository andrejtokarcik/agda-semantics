<dbg>
    ListItem((Pi x  s True   s True ))
</dbg>
<T>
    <k>
        ( f E , applyMgu ( clash(T,, Bool) , #symExpr(19) ) ) ~> fenv ( f
           |-> ((Lambda x  s True  x) @ s |-> (fun ( ListItem(True -> Bool) 
          ListItem(False -> T) ) @ .Map)) g |->  f True  s |-> (fun ( 
          ListItem(True -> Bool) ListItem(False -> T) ) @ .Map) ) ~> evalWhnf2
           ( HOLE ) ~> ( h , #symExpr(16) ) = HOLE ~> funDecl ( h , f |-> (Pi 
          x Bool Bool) g |-> Bool s |-> (Pi #symVariable(5) Bool Set 0) )
    </k>
    <mgu>
        subst(.KList)
    </mgu>
    <data>
        Bool |-> Set 0
        E |-> T
        False |-> Bool
        T |-> Set 0
        True |-> Bool
    </data>
    <meta>
        .Map
    </meta>
    <fun>
        #symVariable(17) |-> E
        f |-> ((Lambda x  s True  x) @ s |-> (fun ( ListItem(True -> Bool) 
          ListItem(False -> T) ) @ .Map))
        g |->  f True 
        s |-> (fun ( ListItem(True -> Bool) ListItem(False -> T) ) @ .Map)
          
    </fun>
    <tenv>
        f |-> applyMgu ( clash(T,, Bool) , (Pi x Bool Bool) )
        g |-> amb(
            applyMgu ( clash(T,, Bool) , Bool ),
            applyMgu ( clash(T,, Bool) , Bool ),
            applyMgu ( clash(T,, Bool) , Bool )
        )
        h |-> 'applyMgu(clash(T,, Bool),, #symExpr(16))
        s |-> applyMgu ( clash(T,, Bool) , (Pi #symVariable(5) Bool Set 0) )
          
    </tenv>
</T>
