<T>
    <k>
        (  Cons Nat Set 0  , applyMgu ( clash(Set 1,, Nat) , #symExpr(28) 
          ) ) ~> fenv ( .Map ) ~> eval2 ( HOLE ) ~>  HOLE Cons Nat Succ Zero 
          Nil Nat  ~> (( (Lambda x  List Nat   Cons Nat Zero x ) , pi ( List 
          Nat , closure ( x ,  List Nat  , .Map ) ) ) HOLE) ~> whnf2 ( HOLE )
           ~> ( expr , #symExpr(10) ) = HOLE ~> funDecl ( expr , .Map )
    </k>
    <mgu>
        subst(.KList)
    </mgu>
    <tenv>
        expr |-> amb(
            applyMgu ( clash(Set 1,, Nat) , #symExpr(10) ),
            applyMgu ( clash(Set 1,, Nat) , #symExpr(10) ),
            applyMgu ( clash(Set 1,, Nat) , #symExpr(10) )
        )
    </tenv>
    <data>
        Cons |-> 'Pi___(a,, Set 0,, (Pi x a (Pi y List a List a)))
        List |-> 'Pi___(a,, Set 0,, Set 0)
        Nat |-> Set 0
        Nil |-> 'Pi___(a,, Set 0,,  List a )
        Succ |-> 'Pi___(x,, Nat,, Nat)
        Zero |-> Nat
    </data>
    <fun>
        #symVariable(26) |-> Set 0
    </fun>
    <meta>
        .Map
    </meta>
</T>
