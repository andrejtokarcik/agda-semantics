<T>
    <k>
        .K
    </k>
    <mgu>
        subst(.KList)
    </mgu>
    <tenvRestore>
        .List
    </tenvRestore>
    <metadata>
        <range>
            .K
        </range>
    </metadata>
    <con>
        ((Data ( "_==_" ) { Var ( "A" ) }) Var ( "x" )) |-> l ( ListItem(Con (
           "refl" )) )
        (Data ( "Vec" ) Var ( "A" )) |-> l ( ListItem(Con ( "[]" )) ListItem(
          Con ( "_::_" )) )
        Data ( "Bool" ) |-> l ( ListItem(Con ( "true" )) ListItem(Con ( 
          "false" )) )
        Data ( "False" ) |-> l ( .List )
        Data ( "Nat" ) |-> l ( ListItem(Con ( "zero" )) ListItem(Con ( "suc" )
          ) )
    </con>
    <funtenvs>
        Fun ( "_8800_" ) |-> m ( Var ( "x" ) |-> #symExpr(368) Var ( "y" )
           |-> #symExpr(368) )
    </funtenvs>
    <metavars>
        #symExpr(374) |-> t ( Data ( "Bool" ) , Set ( 0 ) )
    </metavars>
    <fenv>
        Fun ( "_*_" ) |-> FunClauses ( ListItem(((#symFunClauses(53) Con ( 
          "zero" )) Var ( "m" )) = Con ( "zero" )) ListItem(((#symFunClauses(
          77) (Con ( "suc" ) Var ( "n" ))) Var ( "m" )) = ((Fun ( "_+_" ) Var 
          ( "m" )) ((Fun ( "_*_" ) Var ( "n" )) Var ( "m" )))) )
        Fun ( "_++_" ) |-> FunClauses ( ListItem((((((#symFunClauses(271) { 
          #symExpr(256) }) { Con ( "zero" ) }) { #symExpr(260) }) (Con ( "[]" 
          ) { #symExpr(256) })) Var ( "ys" )) = Var ( "ys" )) ListItem((((((
          #symFunClauses(338) { #symExpr(285) }) { (Con ( "suc" ) #symExpr(277
          )) }) { #symExpr(301) }) ((((Con ( "_::_" ) { #symExpr(285) }) { 
          #symExpr(277) }) Var ( "x" )) Var ( "xs" ))) Var ( "ys" )) = ((((Con
           ( "_::_" ) { #symExpr(321) }) { ((FunClauses ( ListItem(((
          #symFunClauses(24) Con ( "zero" )) Var ( "m" )) = Var ( "m" )) 
          ListItem(((#symFunClauses(45) (Con ( "suc" ) Var ( "n" ))) Var ( "m"
           )) = (Con ( "suc" ) ((Fun ( "_+_" ) Var ( "n" )) Var ( "m" )))) ) 
          #symExpr(325)) #symExpr(327)) }) Var ( "x" )) (((((Fun ( "_++_" ) { 
          #symExpr(321) }) { #symExpr(325) }) { #symExpr(327) }) Var ( "xs" ))
           Var ( "ys" )))) )
        Fun ( "_+_" ) |-> FunClauses ( ListItem(((#symFunClauses(24) Con ( 
          "zero" )) Var ( "m" )) = Var ( "m" )) ListItem(((#symFunClauses(45) 
          (Con ( "suc" ) Var ( "n" ))) Var ( "m" )) = (Con ( "suc" ) ((Fun ( 
          "_+_" ) Var ( "n" )) Var ( "m" )))) )
        Fun ( "_8800_" ) |-> FunClauses ( ListItem((((#symFunClauses(373) { 
          #symExpr(360) }) Var ( "x" )) Var ( "y" )) = (Fun ( "z_" ) (((Data (
           "_==_" ) { #symExpr(368) }) Var ( "x" )) Var ( "y" )))) )
        Fun ( "head" ) |-> FunClauses ( ListItem((((#symFunClauses(140) { 
          #symExpr(139) }) { #symExpr(129) }) ((((Con ( "_::_" ) { #symExpr(
          139) }) { #symExpr(129) }) Var ( "x" )) #symExpr(116))) = Var ( "x" 
          )) )
        Fun ( "map" ) |-> FunClauses ( ListItem((((((#symFunClauses(173) { 
          #symExpr(154) }) { #symExpr(156) }) { Con ( "zero" ) }) Var ( "f" ))
           (Con ( "[]" ) { #symExpr(154) })) = (Con ( "[]" ) { #symExpr(171) }
          )) ListItem((((((#symFunClauses(230) { #symExpr(177) }) { #symExpr(
          179) }) { (Con ( "suc" ) #symExpr(188)) }) Var ( "f" )) ((((Con ( 
          "_::_" ) { #symExpr(177) }) { #symExpr(188) }) Var ( "x" )) Var ( 
          "xs" ))) = ((((Con ( "_::_" ) { #symExpr(213) }) { #symExpr(207) }) 
          (Var ( "f" ) Var ( "x" ))) (((((Fun ( "map" ) { #symExpr(215) }) { 
          #symExpr(213) }) { #symExpr(207) }) Var ( "f" )) Var ( "xs" )))) )
        Fun ( "z_" ) |-> FunClauses ( ListItem((#symFunClauses(351) Var ( "A" 
          )) = ( #symVariable(14) : Var ( "A" ) ) -> Data ( "False" )) )
    </fenv>
    <tenv>
        .Map
    </tenv>
    <sig>
        Fun ( "_*_" ) |-> ( #symVariable(68) : Data ( "Nat" ) ) -> ( 
          #symVariable(71) : Data ( "Nat" ) ) -> Data ( "Nat" )
        Fun ( "_++_" ) |-> { #symExpr(345) : Set ( 0 ) } -> { Var ( "n" ) : 
          Data ( "Nat" ) } -> { Var ( "m" ) : Data ( "Nat" ) } -> ( 
          #symVariable(329) : ((Data ( "Vec" ) #symExpr(345)) Var ( "n" )) ) 
          -> ( #symVariable(332) : ((Data ( "Vec" ) #symExpr(345)) Var ( "m" )
          ) ) -> ((Data ( "Vec" ) #symExpr(345)) ((Fun ( "_+_" ) Var ( "n" )) 
          Var ( "m" )))
        Fun ( "_+_" ) |-> ( #symVariable(246) : Data ( "Nat" ) ) -> ( 
          #symVariable(249) : Data ( "Nat" ) ) -> Data ( "Nat" )
        Fun ( "_8800_" ) |-> { Var ( "A" ) : Set ( 0 ) } -> ( #symVariable(356
          ) : Var ( "A" ) ) -> ( #symVariable(359) : Var ( "A" ) ) -> Set ( 0 
          )
        Fun ( "head" ) |-> { #symExpr(345) : Set ( 0 ) } -> { Var ( "n" ) : 
          Data ( "Nat" ) } -> ( #symVariable(137) : ((Data ( "Vec" ) #symExpr(
          345)) (Con ( "suc" ) Var ( "n" ))) ) -> #symExpr(345)
        Fun ( "map" ) |-> { #symExpr(345) : Set ( 0 ) } -> { Var ( "B" ) : Set
           ( 0 ) } -> { Var ( "n" ) : Data ( "Nat" ) } -> ( #symVariable(221) 
          : ( #symVariable(209) : #symExpr(345) ) -> Var ( "B" ) ) -> ( 
          #symVariable(224) : ((Data ( "Vec" ) #symExpr(345)) Var ( "n" )) ) 
          -> ((Data ( "Vec" ) Var ( "B" )) Var ( "n" ))
        Fun ( "true8800false" ) |-> ( #symVariable(16) : (((Data ( "_==_" ) { 
          Data ( "Bool" ) }) Con ( "true" )) Con ( "false" )) ) -> Data ( 
          "False" )
        Fun ( "z_" ) |-> ( #symVariable(370) : Set ( 0 ) ) -> Set ( 0 )
        Data ( "Bool" ) |-> Set ( 0 )
        Data ( "False" ) |-> Set ( 0 )
        Data ( "Nat" ) |-> Set ( 0 )
        Data ( "Vec" ) |-> ( #symExpr(345) : Set ( 0 ) ) -> ( #symVariable(252
          ) : Data ( "Nat" ) ) -> Set ( 0 )
        Data ( "_==_" ) |-> { #symExpr(345) : Set ( 0 ) } -> ( Var ( "x" ) : 
          #symExpr(345) ) -> ( #symVariable(379) : #symExpr(345) ) -> Set ( 0 
          )
        Con ( "[]" ) |-> { #symExpr(345) : Set ( 0 ) } -> ((Data ( "Vec" ) 
          #symExpr(345)) Con ( "zero" ))
        Con ( "_::_" ) |-> { #symExpr(345) : Set ( 0 ) } -> { Var ( "n" ) : 
          Data ( "Nat" ) } -> ( #symVariable(320) : #symExpr(345) ) -> ( 
          #symVariable(335) : ((Data ( "Vec" ) #symExpr(345)) Var ( "n" )) ) 
          -> ((Data ( "Vec" ) #symExpr(345)) (Con ( "suc" ) Var ( "n" )))
        Con ( "false" ) |-> Data ( "Bool" )
        Con ( "refl" ) |-> { Var ( "A" ) : Set ( 0 ) } -> { Var ( "x" ) : Var 
          ( "A" ) } -> (((Data ( "_==_" ) { #symExpr(345) }) Var ( "x" )) Var 
          ( "x" ))
        Con ( "suc" ) |-> ( #symVariable(249) : Data ( "Nat" ) ) -> Data ( 
          "Nat" )
        Con ( "true" ) |-> Data ( "Bool" )
        Con ( "zero" ) |-> Data ( "Nat" )
    </sig>
    <ncat>
        Name ( "Bool" ) |-> Data ( "Bool" )
        Name ( "False" ) |-> Data ( "False" )
        Name ( "Nat" ) |-> Data ( "Nat" )
        Name ( "Vec" ) |-> Data ( "Vec" )
        Name ( "[]" ) |-> Con ( "[]" )
        Name ( "_*_" ) |-> Fun ( "_*_" )
        Name ( "_++_" ) |-> Fun ( "_++_" )
        Name ( "_+_" ) |-> Fun ( "_+_" )
        Name ( "_8800_" ) |-> Fun ( "_8800_" )
        Name ( "_::_" ) |-> Con ( "_::_" )
        Name ( "_==_" ) |-> Data ( "_==_" )
        Name ( "false" ) |-> Con ( "false" )
        Name ( "head" ) |-> Fun ( "head" )
        Name ( "map" ) |-> Fun ( "map" )
        Name ( "refl" ) |-> Con ( "refl" )
        Name ( "suc" ) |-> Con ( "suc" )
        Name ( "true" ) |-> Con ( "true" )
        Name ( "true8800false" ) |-> Fun ( "true8800false" )
        Name ( "z_" ) |-> Fun ( "z_" )
        Name ( "zero" ) |-> Con ( "zero" )
    </ncat>
</T>
