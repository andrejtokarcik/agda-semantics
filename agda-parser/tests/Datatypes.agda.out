<T>
    <k>
        .K
    </k>
    <mgu>
        subst(.KList)
    </mgu>
    <ctxstack>
        .List
    </ctxstack>
    <sig>
        Fun ( "_+_" ) |-> ( #symVariable(43) : Data ( "Nat" ) ) -> ( 
          #symVariable(46) : Data ( "Nat" ) ) -> Data ( "Nat" )
        Fun ( "elim-False" ) |-> { Var ( "A" ) : Set ( 0 ) } -> ( #symVariable
          (11) : Data ( "False" ) ) -> Var ( "A" )
        Fun ( "if_then_else_" ) |-> { Var ( "A" ) : Set ( 0 ) } -> ( 
          #symVariable(71) : Data ( "Bool" ) ) -> ( #symVariable(74) : Var ( 
          "A" ) ) -> ( #symVariable(77) : Var ( "A" ) ) -> Var ( "A" )
        Fun ( "map" ) |-> { Var ( "A" ) : Set ( 0 ) } -> { Var ( "B" ) : Set (
           0 ) } -> ( #symVariable(159) : ( #symVariable(149) : Var ( "A" ) ) 
          -> Var ( "B" ) ) -> ( #symVariable(162) : (Data ( "List" ) Var ( "A"
           )) ) -> (Data ( "List" ) Var ( "B" ))
        Fun ( "nil" ) |-> ( Var ( "A" ) : Set ( 0 ) ) -> (Data ( "List" ) Var 
          ( "A" ))
        Fun ( "pred" ) |-> ( #symVariable(49) : Data ( "Nat" ) ) -> Data ( 
          "Nat" )
        Data ( "Bool" ) |-> Set ( 0 )
        Data ( "False" ) |-> Set ( 0 )
        Data ( "List" ) |-> ( Var ( "A" ) : Set ( 0 ) ) -> Set ( 0 )
        Data ( "Nat" ) |-> Set ( 0 )
        Con ( "[]" ) |-> { Var ( "A" ) : Set ( 0 ) } -> (Data ( "List" ) Var (
           "A" ))
        Con ( "_::_" ) |-> { Var ( "A" ) : Set ( 0 ) } -> ( #symVariable(152) 
          : Var ( "A" ) ) -> ( #symVariable(165) : (Data ( "List" ) Var ( "A" 
          )) ) -> (Data ( "List" ) Var ( "A" ))
        Con ( "false" ) |-> Data ( "Bool" )
        Con ( "suc" ) |-> ( #symVariable(49) : Data ( "Nat" ) ) -> Data ( 
          "Nat" )
        Con ( "true" ) |-> Data ( "Bool" )
        Con ( "zero" ) |-> Data ( "Nat" )
    </sig>
    <con>
        (Data ( "List" ) Var ( "A" )) |-> l ( ListItem(Con ( "[]" )) ListItem(
          Con ( "_::_" )) )
        Data ( "Bool" ) |-> l ( ListItem(Con ( "true" )) ListItem(Con ( 
          "false" )) )
        Data ( "False" ) |-> l ( .List )
        Data ( "Nat" ) |-> l ( ListItem(Con ( "zero" )) ListItem(Con ( "suc" )
          ) )
    </con>
    <ctx>
        .Map
    </ctx>
    <meta>
        .Map
    </meta>
    <ncat>
        Name ( "Bool" ) |-> Data ( "Bool" )
        Name ( "False" ) |-> Data ( "False" )
        Name ( "List" ) |-> Data ( "List" )
        Name ( "Nat" ) |-> Data ( "Nat" )
        Name ( "[]" ) |-> Con ( "[]" )
        Name ( "_+_" ) |-> Fun ( "_+_" )
        Name ( "_::_" ) |-> Con ( "_::_" )
        Name ( "elim-False" ) |-> Fun ( "elim-False" )
        Name ( "false" ) |-> Con ( "false" )
        Name ( "if_then_else_" ) |-> Fun ( "if_then_else_" )
        Name ( "map" ) |-> Fun ( "map" )
        Name ( "nil" ) |-> Fun ( "nil" )
        Name ( "pred" ) |-> Fun ( "pred" )
        Name ( "suc" ) |-> Con ( "suc" )
        Name ( "true" ) |-> Con ( "true" )
        Name ( "zero" ) |-> Con ( "zero" )
    </ncat>
    <fun>
        Fun ( "_+_" ) |-> FunClauses ( ListItem(((#symFunClauses(31) Con ( 
          "zero" )) Var ( "m" )) = Var ( "m" )) ListItem(((#symFunClauses(52) 
          (Con ( "suc" ) Var ( "n" ))) Var ( "m" )) = (Con ( "suc" ) ((Fun ( 
          "_+_" ) Var ( "n" )) Var ( "m" )))) )
        Fun ( "if_then_else_" ) |-> FunClauses ( ListItem(((((#symFunClauses(
          66) { #symExpr(65) }) Con ( "true" )) Var ( "x" )) Var ( "y" )) = 
          Var ( "x" )) ListItem(((((#symFunClauses(80) { #symExpr(79) }) Con (
           "false" )) Var ( "x" )) Var ( "y" )) = Var ( "y" )) )
        Fun ( "map" ) |-> FunClauses ( ListItem(((((#symFunClauses(122) { 
          #symExpr(105) }) { #symExpr(107) }) Var ( "f" )) (Con ( "[]" ) { 
          #symExpr(105) })) = (Con ( "[]" ) { #symExpr(120) })) ListItem(((((
          #symFunClauses(168) { #symExpr(126) }) { #symExpr(128) }) Var ( "f" 
          )) (((Con ( "_::_" ) { #symExpr(126) }) Var ( "x" )) Var ( "xs" ))) 
          = (((Con ( "_::_" ) { #symExpr(153) }) (Var ( "f" ) Var ( "x" ))) ((
          ((Fun ( "map" ) { #symExpr(155) }) { #symExpr(153) }) Var ( "f" )) 
          Var ( "xs" )))) )
        Fun ( "nil" ) |-> FunClauses ( ListItem((#symFunClauses(97) Var ( "A" 
          )) = (Con ( "[]" ) { Var ( "A" ) })) )
        Fun ( "pred" ) |-> FunClauses ( ListItem((#symFunClauses(15) Con ( 
          "zero" )) = Con ( "zero" )) ListItem((#symFunClauses(23) (Con ( 
          "suc" ) Var ( "n" ))) = Var ( "n" )) )
    </fun>
</T>
