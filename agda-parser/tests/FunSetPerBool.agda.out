<T>
    <k>
        .K
    </k>
    <mgu>
        subst(.KList)
    </mgu>
    <metadata>
        <range>
            .K
        </range>
    </metadata>
    <con>
        Data ( "Bool" ) |-> c ( ListItem(Con ( "True" )) ListItem(Con ( 
          "False" )) )
        Data ( "T" ) |-> c ( ListItem(Con ( "E" )) )
    </con>
    <funtenvs>
        Fun ( "f" ) |-> m ( #symExpr(8) |-> Set ( #symInt(10) ) )
        Fun ( "f2" ) |-> m ( #symExpr(8) |-> Set ( #symInt(10) ) #symExpr(14)
           |-> Set ( #symInt(16) ) #symExpr(20) |-> Set ( #symInt(22) ) )
        Fun ( "g" ) |-> m ( #symExpr(8) |-> Set ( #symInt(10) ) #symExpr(14)
           |-> Set ( #symInt(16) ) )
        Fun ( "h" ) |-> m ( #symExpr(8) |-> Set ( #symInt(10) ) #symExpr(14)
           |-> Set ( #symInt(16) ) #symExpr(20) |-> Set ( #symInt(22) ) 
          #symExpr(26) |-> Set ( #symInt(28) ) )
        Fun ( "i" ) |-> m ( #symExpr(8) |-> Set ( #symInt(10) ) #symExpr(14)
           |-> Set ( #symInt(16) ) #symExpr(20) |-> Set ( #symInt(22) ) 
          #symExpr(26) |-> Set ( #symInt(28) ) #symExpr(35) |-> Set ( #symInt(
          37) ) )
        Fun ( "j" ) |-> m ( #symExpr(8) |-> Set ( #symInt(10) ) #symExpr(14)
           |-> Set ( #symInt(16) ) #symExpr(20) |-> Set ( #symInt(22) ) 
          #symExpr(26) |-> Set ( #symInt(28) ) #symExpr(35) |-> Set ( #symInt(
          37) ) )
        Fun ( "s" ) |-> m ( .Map )
    </funtenvs>
    <metavars>
        #symExpr(8) |-> t ( ( Var ( "x" ) : (Fun ( "s" ) Con ( "True" )) ) -> 
          (Fun ( "s" ) Con ( "True" )) , Set ( #symInt(10) ) )
        #symExpr(14) |-> t ( Data ( "Bool" ) , Set ( #symInt(16) ) )
        #symExpr(20) |-> t ( ( Var ( "x" ) : Data ( "Bool" ) ) -> ( Var ( "y" 
          ) : (Fun ( "s" ) Var ( "x" )) ) -> (Fun ( "s" ) Var ( "x" )) , Set (
           #symInt(22) ) )
        #symExpr(26) |-> t ( Data ( "T" ) , Set ( #symInt(28) ) )
        #symExpr(35) |-> t ( ( Var ( "y" ) : (Fun ( "s" ) Con ( "True" )) ) ->
           (Fun ( "s" ) Con ( "True" )) , Set ( #symInt(37) ) )
    </metavars>
    <fenv>
        Fun ( "f" ) |-> \ ( Var ( "x" ) : (Fun ( "s" ) Con ( "True" )) ) -> 
          Var ( "x" )
        Fun ( "f2" ) |-> \ ( Var ( "x" ) : Data ( "Bool" ) ) -> \ ( Var ( "y" 
          ) : (Fun ( "s" ) Var ( "x" )) ) -> Var ( "y" )
        Fun ( "g" ) |-> (Fun ( "f" ) Con ( "True" ))
        Fun ( "h" ) |-> ((Fun ( "f2" ) Con ( "False" )) Con ( "E" ))
        Fun ( "i" ) |-> (Fun ( "f2" ) Con ( "True" ))
        Fun ( "j" ) |-> (Fun ( "f2" ) Con ( "False" ))
        Fun ( "s" ) |-> FunClauses ( 1 , ListItem((%fun Con ( "True" )) = Data
           ( "Bool" )) ListItem((%fun Con ( "False" )) = Data ( "T" )) )
    </fenv>
    <tenv>
        #symExpr(8) |-> Set ( #symInt(10) )
        #symExpr(14) |-> Set ( #symInt(16) )
        #symExpr(20) |-> Set ( #symInt(22) )
        #symExpr(26) |-> Set ( #symInt(28) )
        #symExpr(35) |-> Set ( #symInt(37) )
    </tenv>
    <sig>
        Fun ( "f" ) |-> ( Var ( "x" ) : (Fun ( "s" ) Con ( "True" )) ) -> (Fun
           ( "s" ) Con ( "True" ))
        Fun ( "f2" ) |-> ( Var ( "x" ) : Data ( "Bool" ) ) -> ( Var ( "y" ) : 
          (Fun ( "s" ) Var ( "x" )) ) -> (Fun ( "s" ) Var ( "x" ))
        Fun ( "g" ) |-> Data ( "Bool" )
        Fun ( "h" ) |-> Data ( "T" )
        Fun ( "i" ) |-> ( Var ( "y" ) : (Fun ( "s" ) Con ( "True" )) ) -> (Fun
           ( "s" ) Con ( "True" ))
        Fun ( "j" ) |-> ( Var ( "y" ) : (Fun ( "s" ) Con ( "False" )) ) -> (
          Fun ( "s" ) Con ( "False" ))
        Fun ( "s" ) |-> ( #symVariable(44) : Data ( "Bool" ) ) -> Set ( 0 )
        Data ( "Bool" ) |-> Set ( 0 )
        Data ( "T" ) |-> Set ( 0 )
        Con ( "E" ) |-> Data ( "T" )
        Con ( "False" ) |-> Data ( "Bool" )
        Con ( "True" ) |-> Data ( "Bool" )
    </sig>
    <ncat>
        Name ( "Bool" ) |-> Data ( "Bool" )
        Name ( "E" ) |-> Con ( "E" )
        Name ( "False" ) |-> Con ( "False" )
        Name ( "T" ) |-> Data ( "T" )
        Name ( "True" ) |-> Con ( "True" )
        Name ( "f" ) |-> Fun ( "f" )
        Name ( "f2" ) |-> Fun ( "f2" )
        Name ( "g" ) |-> Fun ( "g" )
        Name ( "h" ) |-> Fun ( "h" )
        Name ( "i" ) |-> Fun ( "i" )
        Name ( "j" ) |-> Fun ( "j" )
        Name ( "s" ) |-> Fun ( "s" )
    </ncat>
</T>
